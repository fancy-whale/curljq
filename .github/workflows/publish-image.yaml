on:
  push:
    branches:
      - main
    
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Retrieving the Version
        run: | 
          echo "Getting version from the version.json file..."
          ApplicationVersion=$(cat version.json | jq -r '. | "\(.major).\(.minor).\(.patch)"')
          echo "version: $ApplicationVersion"
          echo "Testing if this version already exists in GitHub..."
          STATUS_CODE=$(curl -LI https://api.github.com/repos/gcarrarom/${GITHUB_REPOSITORY}/git/ref/tags/$ApplicationVersion  -o /dev/null -w '%{http_code}\n')
          echo "GitHub returned with a ${STATUS_CODE}."
          if [[ "$STATUS_CODE" != "404" ]]; then
            if [[ "$STATUS_CODE" = "200" ]]; then
              echo "Tag v$ApplicationVersion already exists!"
              exit 100
            else
              echo "Something went wrong! Github returned a $STATUS_CODE error!"
              exit 200
            fi
          fi
          echo "All good, this doesn't match any old versions"
          echo "Version to be used: $ApplicationVersion"
          echo "RELEASE_VERSION=$ApplicationVersion" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          platforms: linux/amd64,linux/arm64
          install: true
      - name: build
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${GITHUB_REPOSITORY_OWNER} --password-stdin
          docker build -t ghcr.io/${GITHUB_REPOSITORY}:${RELEASE_VERSION} . --push
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release v${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false    
